{"code":"import { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hono!'))\n\nexport default app","nodes":[{"type":"hover","text":"(alias) class Hono<E extends Env = BlankEnv, S extends Schema = BlankSchema, BasePath extends string = \"/\">\nimport Hono","docs":"The Hono class extends the functionality of the HonoBase class.\nIt sets up routing and allows for custom options to be passed.","tags":[["template","E - The environment type."],["template","S - The schema type."],["template","BasePath - The base path type."]],"start":9,"length":4,"target":"Hono","line":0,"character":9},{"type":"hover","text":"const app: Hono<BlankEnv, BlankSchema, \"/\">","start":34,"length":3,"target":"app","line":1,"character":6},{"type":"hover","text":"(alias) new Hono<BlankEnv, BlankSchema, \"/\">(options?: HonoOptions<BlankEnv> | undefined): Hono<BlankEnv, BlankSchema, \"/\">\nimport Hono","docs":"Creates an instance of the Hono class.","tags":[["param","options - Optional configuration options for the Hono instance."]],"start":44,"length":4,"target":"Hono","line":1,"character":16},{"type":"hover","text":"const app: Hono<BlankEnv, BlankSchema, \"/\">","start":52,"length":3,"target":"app","line":3,"character":0},{"type":"hover","text":"(property) Hono<BlankEnv, BlankSchema, \"/\">.get: HandlerInterface\n<\"/\", \"/\", Response & TypedResponse<\"Hono!\", ContentfulStatusCode, \"text\">, BlankInput, BlankEnv>(path: \"/\", handler: H<BlankEnv, \"/\", BlankInput, Response & TypedResponse<\"Hono!\", ContentfulStatusCode, \"text\">>) => Hono<BlankEnv, {\n    \"/\": {\n        $get: {\n            input: {};\n            output: \"Hono!\";\n            outputFormat: \"text\";\n            status: ContentfulStatusCode;\n        };\n    };\n}, \"/\"> (+22 overloads)","start":56,"length":3,"target":"get","line":3,"character":4},{"type":"hover","text":"(parameter) c: Context<BlankEnv, \"/\", BlankInput>","start":66,"length":1,"target":"c","line":3,"character":14},{"type":"hover","text":"(parameter) c: Context<BlankEnv, \"/\", BlankInput>","start":72,"length":1,"target":"c","line":3,"character":20},{"type":"hover","text":"(property) Context<BlankEnv, \"/\", BlankInput>.text: TextRespond\n<\"Hono!\", ContentfulStatusCode>(text: \"Hono!\", status?: ContentfulStatusCode | undefined, headers?: HeaderRecord) => Response & TypedResponse<\"Hono!\", ContentfulStatusCode, \"text\"> (+1 overload)","start":74,"length":4,"target":"text","line":3,"character":22},{"type":"hover","text":"const app: Hono<BlankEnv, BlankSchema, \"/\">","start":105,"length":3,"target":"app","line":5,"character":15}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/gunashekar/Guna/website/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/gunashekar/Guna/website/index.ts","content":"import { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hono!'))\n\nexport default app","extension":"ts","supportLsp":true}],"positionQueries":[],"positionCompletions":[],"positionHighlights":[]},"queries":[],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) class Hono<E extends Env = BlankEnv, S extends Schema = BlankSchema, BasePath extends string = \"/\">\nimport Hono","docs":"The Hono class extends the functionality of the HonoBase class.\nIt sets up routing and allows for custom options to be passed.","tags":[["template","E - The environment type."],["template","S - The schema type."],["template","BasePath - The base path type."]],"start":9,"length":4,"target":"Hono","line":0,"character":9},{"type":"hover","text":"const app: Hono<BlankEnv, BlankSchema, \"/\">","start":34,"length":3,"target":"app","line":1,"character":6},{"type":"hover","text":"(alias) new Hono<BlankEnv, BlankSchema, \"/\">(options?: HonoOptions<BlankEnv> | undefined): Hono<BlankEnv, BlankSchema, \"/\">\nimport Hono","docs":"Creates an instance of the Hono class.","tags":[["param","options - Optional configuration options for the Hono instance."]],"start":44,"length":4,"target":"Hono","line":1,"character":16},{"type":"hover","text":"const app: Hono<BlankEnv, BlankSchema, \"/\">","start":52,"length":3,"target":"app","line":3,"character":0},{"type":"hover","text":"(property) Hono<BlankEnv, BlankSchema, \"/\">.get: HandlerInterface\n<\"/\", \"/\", Response & TypedResponse<\"Hono!\", ContentfulStatusCode, \"text\">, BlankInput, BlankEnv>(path: \"/\", handler: H<BlankEnv, \"/\", BlankInput, Response & TypedResponse<\"Hono!\", ContentfulStatusCode, \"text\">>) => Hono<BlankEnv, {\n    \"/\": {\n        $get: {\n            input: {};\n            output: \"Hono!\";\n            outputFormat: \"text\";\n            status: ContentfulStatusCode;\n        };\n    };\n}, \"/\"> (+22 overloads)","start":56,"length":3,"target":"get","line":3,"character":4},{"type":"hover","text":"(parameter) c: Context<BlankEnv, \"/\", BlankInput>","start":66,"length":1,"target":"c","line":3,"character":14},{"type":"hover","text":"(parameter) c: Context<BlankEnv, \"/\", BlankInput>","start":72,"length":1,"target":"c","line":3,"character":20},{"type":"hover","text":"(property) Context<BlankEnv, \"/\", BlankInput>.text: TextRespond\n<\"Hono!\", ContentfulStatusCode>(text: \"Hono!\", status?: ContentfulStatusCode | undefined, headers?: HeaderRecord) => Response & TypedResponse<\"Hono!\", ContentfulStatusCode, \"text\"> (+1 overload)","start":74,"length":4,"target":"text","line":3,"character":22},{"type":"hover","text":"const app: Hono<BlankEnv, BlankSchema, \"/\">","start":105,"length":3,"target":"app","line":5,"character":15}],"tags":[]}